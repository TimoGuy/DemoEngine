###############################################
####                                       ####
####            Timo's Kanban              ####
####            (Mikanseihen)              ####
####                                       ####
###############################################

RULES:
	- All kanban tasks must be done in the general order (i.e. move tasks that you plan to do later to a later part in this note; be a bit less strict with task families)
	- If a task/family of tasks are obsolete/ignored, mark as "done (obsolete)"
	- If a task/family is blocked or cannot be solved in the current order or something is gonna be on backburner, physically move it to the best place for it to be
	- Don't put misc tasks/bug fixes in this note. Only place stories/tasks/families in this note
	- Put unfinished (todo, in progress, etc.) in the Mikanseihen note and all the finished (done, done(obsolete), etc.) in the Kanryouhen note










// SOL-10 (@STATUS: in-progress)
	Create the game loop

	This'll be a bigger task, but it'll be worth it to define bc everything else can fall into this.
	The game loop is currently defined as such:
	- Wake up
	- Find water or solar for bottle and boots
	- Platform and sneak from people (envious of your bod, essentially)
		- Or attack them (See SOL-1)
	- Explore throughout the day as much as you can, leaving boots to charge or pulling up water
	- Once nighttime falls, go back to bed or find a statue for boots and go back to bed










// SOL-12 (@STATUS: todo) (@PARENT: SOL-10)
	Create a simple camera 










// SOL-11 (@STATUS: in-progress) (@PARENT: SOL-10)
	Create the wake up and go to sleep animations










// SOL-1 (@STATUS: todo) (@CHILDREN: SOL-2, SOL-3, SOL-4, SOL-8)
	Create enemy AI (Type A)

	I want to have a pretty proficient enemy who's goal is to grapple the player and slam them onto the ground onto their back. By doing this, the player's bottle will crack (poise break) and a good amount of water will leak out, and continue leaking out for 10 seconds after getting up (interval can change... this should be editable).
	
	This enemy will have no weapons but rather just charge at the player in interesting ways.










// SOL-8 (@STATUS: todo) (@PARENT: SOL-1)
	Add ability for player to get hurt.

	Player needs to be able to get hurt for there to be an enemy that has effect on the player.

	- Player should have an animation of hurt
	- Player should have red blinky from getting hurt
	- Player should have some of their water from their bottle leaking out (particle effects in the future would be nice but not in the scope of this task)










// SOL-2 (@STATUS: todo) (@PARENT: SOL-1)
	Make capsule that has physics

	This is relatively simple to do. However, you'll need to abstract the physics system into its own component. How to do that technically, that's up to you... and also whether you want to switch to a different physics engine that's another choice you may have to make...
	









// SOL-3 (@STATUS: todo) (@PARENT: SOL-1)
	Make capsule move towards player in interesting ways

	The base part of this task is to create a controller for the enemy to move towards the player.

	However, there are a couple interesting movement types I want to try out.
		1. Have the enemy sweep over and catch the player on the side instead of charging straight forward.
		2. Have there be some kind of high jump to catch the player off guard if the enemy is charging straight forward.










// SOL-4 (@STATUS: todo) (@PARENT: SOL-1)
	Add grappling and throwing/slamming to the enemy

	Add the functionality for the enemy to be able to grab the player and slam them down and throw the player.










// SOL-5 (@STATUS: todo) (@CHILDREN: SOL-6)
	Create rocket boots feature.

	CONTEXT: this is supposed to be the ancient weapon held by the old man. It's very versatile, and is the reason why player can do double jumps. With it, however, it needs to be powered by something (like how the bottle needs to be powered by water)... so figure that out. Maybe some kind of light or something? IDEA: have statues that have a huge rod that reaches the sky and you need to leave the boots at one of those statues so that their solar energy is recharged. They'll also charge if you leave them overnight, however, in the morning you'll have to return to the place you left them at.

	GOAL: have statues that the player will leave the boots there and it will raise them up to the heavens, leaving a big beacon (note: all the statues are about human height, but it's when you drop off the boots that a telescoping rod rises up and penetrates the skies above. This way you can see the exact statue that has the boots when you gotta go pick them up later.)










// SOL-6 (@STATUS: todo) (@PARENT: SOL-5) (@BLOCKED BY: SOL-7)
	Create statues and drop off location (rocket boots feature)

	Create the statue where the player can drop off their boots, the statue lifts up the boots into the air, and the player can go pick them up, causing the statue to lower the boots and give them back. 3 hours in the daytime is enough to fully charge them, and the statue will tell you how much charge is in the boots and if you'd like to take them before they're 100% charged.










// SOL-7 (@STATUS: todo)
	Create a textbox system

	<@TODO: fill in details>










// SOL-9 (@STATUS: todo)
	Create a kanban helper python script

	The main reason why I'd have this is bc of difficulty of thinking of the id numbers. There should be a counter for the id numbers.

	Has these commands:
	- Create new task (return the created task ID)
	- Delete task (@IN: ticket ID. return if success or not)
	- Add child (@IN: ticket ID. Error if the task is a child (i.e. has a parent), bc I only want one layer of hierarchy... nothing more)
	- Get status of task (@IN: ticket ID.)
	- Change status of task (@IN: ticket ID, new status. error message if task has children... bc the childrens' statuses should dictate what the ticket status of the mother ticket is)
	- Lint (NOTE: this is also run after every task. It essentially groups together all child tasks with parent tasks, updates the status of mother tasks, and moves task families to the correct kanban ('mikansei' or 'kanryou'), then makes sure there are exactly 10 carriage returns between tasks (i.e. check that there are 10CR *before* each task, bc that can space out the first task with the RULES section which is what's wanted.))
	- Print command list (-h / --help)